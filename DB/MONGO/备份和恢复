## 方式

逻辑备份：mongodump & mongorestore，可以支持单个库、单个collection，也支持条件查询备份，比较灵活通常用于数据量比较少的场景

注意：mongodump  不会备份索引，只会备份索引的元数据，只有在恢复的时候才会重建索引

物理备份：通过 copy 物理文件或者备份整块磁盘/磁盘快照，通过用于云服务或者数据量大的场景

第三方备份工具：

### 备份前

```
# 查看数据大小，单位为 G
db.stats(1024*1024*1024) 
```



### 逻辑备份

###### mongodump

```
mongodump -h localhost -d sup-tech -u suptech  -c nft -q '{"locality_uk": "xiamen/bcos/sscc/9"}' --out /opt/

mongodump -h localhost -d logs -u recorder -p "recorderpassword" --out /opt/

mongodump -h localhost -d sync-iris -u root --authenticationDatabase=admin --gzip --out 
```

--oplog

使用此选项可确保 mongodump 创建包含oplog的数据库转储，以创建 mongod 实例状态的时间点快照。要还原到特定的时间点备份，请将使用此选项创建的输出与mongorestore --oplogReplay 结合使用

--forceTableScan 

会强制扫描表不使用快照

如果需要创建某一时间点的快照，则使用选项`--oplog`，该选项不能与选项`--query`一起使用。

###### mongorestore

mongorestore 可以创建新的数据库或将数据添加到现有的数据库，但是 mongorestore 仅仅执行insert操作，不执行 update 操作。这就意味着如果将文档还原到现有的数据库，现有的数据库中的文档的id的值和要还原的文档中的 id 值是一样的，是不会将数据库原有的值覆盖的，还有就是 mongorestore 会重建索引

```

mongorestore --db cschain_archived -u csarchived  /opt/sup-tech/

mongorestore --db logs -u recorder --password "recorderpassword" /opt/errlog.bson

mongodump -d rainbow-tmp -u rainbow -p rainbowpassword --gzip -o=.

mongodump -d sup-tech -c nft_history -u cschain -p ssssss --gzip -o=.mongorestore -d rainbow-tmp -u 

rainbow -p rainbowpassword --gzip ./rainbow-tmp/

mongoexport -d irita-gaia -c ex_staking_validator  -u gaia -p xxxxx
```

###### mongodump 和 mongoexport

mongoexport/mongoimport导入/导出的是JSON格式，而mongodump/mongorestore导入/导出的是BSON格式。JSON可读性强但体积较大，BSON则是二进制文件，体积小但对人类几乎没有可读性。

Mongodump 可以backup整个数据库，而 mongoexport 要对每个collection进行操作。

在一些 mongodb 版本之间，BSON格式可能会随版本不同而有所不同，所以不同版本之间用mongodump/mongorestore可能不会成功，具体要看版本之间的兼容性。当无法使用BSON进行跨版本的数据迁移的时候，使用JSON格式即 mongoexport/mongoimport 是一个可选项。

跨版本的 mongodump/mongorestore 个人并不推荐，实在要做请先检查文档看两个版本是否兼容（大部分时候是的）。
JSON 虽然具有较好的跨版本通用性，但其只保留了数据部分，不保留索引，账户等其他基础信息。使用时应该注意。
总之，这两套工具在实际使用中各有优势，应该根据应用场景选择使用但严格地说，mongoexport/mongoimport的主要作用还是导入/导出数据时使用，并不是一个真正意义上的备份工具。

### 物理备份：

一般通过锁定从库，进行磁盘快照或备份，完成后再进行解锁。

```
db.fsyncLock()  锁定从数据库
db.fsyncUnlock() 解锁数据库
```





参考：https://cloud.tencent.com/developer/article/1753163

