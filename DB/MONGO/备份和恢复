备份和恢复

### mongodump

```
mongodump -h localhost -d sup-tech -u suptech  -c nft -q '{"locality_uk": "xiamen/bcos/sscc/9"}' --out /opt/
mongodump -h localhost -d logs -u recorder -p "recorderpassword" --out /opt/
mongodump -h localhost -d sync-iris -u root --authenticationDatabase=admin --gzip --out 
```



### mongorestore

mongorestore 可以创建新的数据库或将数据添加到现有的数据库，但是 mongorestore 仅仅执行insert操作，不执行 update 操作。这就意味着如果将文档还原到现有的数据库，现有的数据库中的文档的id的值和要还原的文档中的 id 值是一样的，是不会将数据库原有的值覆盖的，还有就是 mongorestore 会重建索引

```

mongorestore --db cschain_archived -u csarchived  /opt/sup-tech/
mongorestore --db logs -u recorder --password "recorderpassword" /opt/errlog.bson

mongodump -d rainbow-tmp -u rainbow -p rainbowpassword --gzip -o=.

mongodump -d sup-tech -c nft_history -u cschain -p ssssss --gzip -o=.mongorestore -d rainbow-tmp -u 

rainbow -p rainbowpassword --gzip ./rainbow-tmp/

mongoexport -d irita-gaia -c ex_staking_validator  -u gaia -p xxxxx
```







### mongodump 和 mongoexport

mongoexport/mongoimport导入/导出的是JSON格式，而mongodump/mongorestore导入/导出的是BSON格式。JSON可读性强但体积较大，BSON则是二进制文件，体积小但对人类几乎没有可读性。

Mongodump可以backup整个数据库，而mongoexport要对每个collection进行操作。

在一些mongodb版本之间，BSON格式可能会随版本不同而有所不同，所以不同版本之间用mongodump/mongorestore可能不会成功，具体要看版本之间的兼容性。当无法使用BSON进行跨版本的数据迁移的时候，使用JSON格式即mongoexport/mongoimport是一个可选项。

跨版本的mongodump/mongorestore个人并不推荐，实在要做请先检查文档看两个版本是否兼容（大部分时候是的）。
JSON虽然具有较好的跨版本通用性，但其只保留了数据部分，不保留索引，账户等其他基础信息。使用时应该注意。
总之，这两套工具在实际使用中各有优势，应该根据应用场景选择使用（好像跟没说一样）。但严格地说，mongoexport/mongoimport的主要作用还是导入/导出数据时使用，并不是一个真正意义上的备份工具。所以这里也不展开介绍了。